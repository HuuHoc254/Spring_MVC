<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.example.demo.repository.OrderMapper" >
	<select id="countSearch" resultType="int">
	   	SELECT 
	   		COUNT(*)
	    FROM
	    	 orders 	o
	    JOIN products 	p ON p.id 	= o.product_id
	    JOIN accounts 	a ON a.id 	= o.account_id
	    JOIN customers 	c ON c.id 	= o.customer_id
	    <where>
	    	(
			#{isAdmin} 
			OR o.account_id = #{accountId} )
	        <if test="accountName != null">
	            AND a.name LIKE CONCAT(#{accountName}, '%')
	        </if>
	        <if test="fullName != null">
	            AND a.full_name LIKE CONCAT(#{fullName}, '%')
	        </if>
	        <if test="productCode != null">
	            AND p.code LIKE CONCAT(#{productCode}, '%')
	        </if>
	        <if test="productName != null">
	            AND p.name LIKE CONCAT(#{productName}, '%')
	        </if>
	        <if test="customerName != null">
	            AND c.name LIKE CONCAT(#{customerName}, '%')
	        </if>
	        <if test="phone != null">
	            AND o.phone LIKE CONCAT(#{phone}, '%')
	        </if>
	        <if test="beginDate != ''">
	            AND o.order_date &gt; #{beginDate}
	        </if>
	        <if test="endDate != ''">
	            AND o.order_date &lt; #{endDate}
	        </if>
	        <if test="orderStatus and !allocationStatus">
	            AND o.order_status_id = 1
	        </if>
	        <if test="!orderStatus and allocationStatus">
	            AND o.order_status_id = 2
	        </if>
	    </where>
	</select>

	<select id="search" resultType="java.util.Map">
	   	SELECT 
	   		 o.id
  		,	 o.order_date
	    ,	 o.unit_price
	    ,	 o.quantity
	    ,	 o.customer_phone
	    ,	 o.customer_address
	    ,	 o.allocation_date
	    ,	 o.version
	    ,	 p.code
	    ,	 p.name
	    ,	 c.name
	    ,	 a.name
	    ,	 a.full_name
	    ,	 ost.name
	    
	    FROM
	    	 orders 		o
	    JOIN products 		p 	ON p.id 	= o.product_id
	    JOIN accounts 		a 	ON a.id 	= o.account_id
	    JOIN customers 		c 	ON c.id 	= o.customer_id
	    JOIN order_status 	ost ON ost.id 	= o.order_status_id
	    <where>
	    	(
			#{isAdmin} 
			OR o.account_id = #{accountId} )
	        <if test="accountName != null">
	            AND a.name LIKE CONCAT(#{accountName}, '%')
	        </if>
	        <if test="fullName != null">
	            AND a.full_name LIKE CONCAT(#{fullName}, '%')
	        </if>
	        <if test="productCode != null">
	            AND p.code LIKE CONCAT(#{productCode}, '%')
	        </if>
	        <if test="productName != null">
	            AND p.name LIKE CONCAT(#{productName}, '%')
	        </if>
	        <if test="customerName != null">
	            AND c.name LIKE CONCAT(#{customerName}, '%')
	        </if>
	        <if test="phone != null">
	            AND o.customer_phone LIKE CONCAT(#{phone}, '%')
	        </if>
	        <if test="beginDate != ''">
	            AND o.date &gt; #{beginDate}
	        </if>
	        <if test="endDate != ''">
	            AND o.date &lt; #{endDate}
	        </if>
	        <if test="orderStatus and !allocationStatus">
	            AND o.order_status_id = 1
	        </if>
	        <if test="!orderStatus and allocationStatus">
	            AND o.order_status_id = 2
	        </if>
	    </where>
	    ORDER BY
	    	o.order_date DESC
    	LIMIT 3
	    OFFSET #{offset}
	</select>

	<update id="update">
		UPDATE
			orders
		SET
			product_id			= #{productId}
		,	unit_price			= #{unitPrice}
		,	quantity			= #{quantity}
		,	customer_id			= #{customerId}
		,	customer_address	= #{address}
		,	customer_phone		= #{phone}
		,	version				= version + 1
		<where>
			id 					= #{id}
		AND version  			= #{version}
		AND order_status_id 	= 1
		</where>
	</update>

	<insert id="insert">
		INSERT INTO orders(product_id, unit_price, quantity, customer_id, customer_address, customer_phone, account_id )
		VALUES(#{productId}, #{unitPrice}, #{quantity}, #{customerId}, #{address}, #{phone}, #{accountId})
	</insert>

	<select id="allocateInventory" statementType="CALLABLE">
    	{ call allocateInventory(#{productId, mode=IN, jdbcType=INTEGER}, #{quantityToAdd, mode=IN, jdbcType=INTEGER}) }
	</select>
  </mapper>