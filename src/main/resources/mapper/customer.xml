<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.example.demo.repository.CustomerMapper" >

	<select id="findById" resultType="java.util.Map">
	    SELECT 
	    	customer_id, customer_name, address, phone_number ,administrator_id as account_id , version
	    FROM
	    	customer
	    <where>
	    		is_deleted = FALSE
	    	AND customer_id = #{customerId} 
	    </where>
	</select>

	<select id="countSearch" resultType="int">
	   	SELECT 
	   		COUNT(*)
	    FROM
	    	customer
	    <where>
	    	is_deleted = false
	        <if test="customerName != null">
	            AND customer_name LIKE CONCAT(#{customerName}, '%')
	        </if>
	        <if test="phoneNumber != null">
	            AND phone_number LIKE CONCAT(#{phoneNumber}, '%')
	        </if>
	    </where>
	</select>

	<select id="search" resultType="java.util.Map">
	    SELECT 
	    	  c.customer_id
	    	, c.customer_name
	    	, c.address
	    	, c.phone_number
	    	, a.account_id
	    	, a.full_name
	    FROM
	    	customer c 
	    JOIN account a ON a.account_id = c.administrator_id
	    <where>
	    	c.is_deleted = false
	        <if test="customerName != null">
	            AND c.customer_name LIKE CONCAT(#{customerName}, '%')
	        </if>
	        <if test="phoneNumber != null">
	            AND c.phone_number LIKE CONCAT(#{phoneNumber}, '%')
	        </if>
	    </where>
	    ORDER BY
    	 	SUBSTRING_INDEX(c.customer_name, ' ', -1)
	    LIMIT 3
	    OFFSET #{offset}
	</select>

	<select id="existsByPhoneNumber" resultType="int">
	    SELECT 
	    	COUNT(*)
	    FROM
	    	customer
	    <where>
	    	phone_number = #{phoneNumber}
	    </where>
	</select>

	<select id="existsByPhoneNumberNotId" resultType="int">
	    SELECT 
	    	COUNT(*)
	    FROM
	    	customer
	    <where>
	    	phone_number = #{phoneNumber}
	    AND customer_id != #{customerId} 
	    </where>
	</select>
	
	<insert id="insertCustomer">
		INSERT INTO 
				customer( customer_name, phone_number, address, administrator_id)
		VALUES
				(#{customerName},#{phoneNumber},#{address},#{accountId})
	</insert>

	<update id="updateCustomer">
		UPDATE
			customer
		SET
				customer_name 		= #{customerName}
			, 	phone_number 		= #{phoneNumber}
			, 	address 			= #{address}
			, 	version 			= #{version} + 1
		<where>
				customer_id 		= #{customerId}
			AND	version 			= #{version}
		</where>
	</update>

	<update id="deleteCustomer">
		UPDATE
			customer
		SET
				is_deleted 	= TRUE
		<where>
				customer_id 		= #{customerId}
		</where>
	</update>

	<select id="getPhoneNumberByName" resultType="String">
	    SELECT 
	    	phone_number
	    FROM
	    	customer
	    <where>
	    	is_deleted = FALSE
	    AND customer_name != #{customerName} 
	    </where>
	</select>

	<select id="getCustomerNameByPhoneNumber" resultType="String">
	    SELECT 
	    	customer_name
	    FROM
	    	customer
	    <where>
	    	is_deleted = FALSE
	    AND phone_number != #{phoneNumber} 
	    </where>
	</select>
  </mapper>