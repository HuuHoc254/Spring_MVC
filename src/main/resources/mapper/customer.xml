<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.example.demo.repository.CustomerMapper" >

	<select id="findById" resultType="java.util.Map">
	    SELECT 
	    	id, name, address, number ,administrator_id as account_id , version
	    FROM
	    	customers
	    <where>
	    		is_deleted 	= FALSE
	    	AND id 			= #{id} 
	    </where>
	</select>

	<select id="findByPhone" resultType="java.util.Map">
	    SELECT 
	    	id, name, address, phone ,administrator_id as account_id , version
	    FROM
	    	customers
	    <where>
	    		is_deleted 	= FALSE
    	AND 	phone 		= #{phone} 
	    </where>
	</select>

	<select id="countSearch" resultType="int">
	   	SELECT 
	   		COUNT(*)
	    FROM
	    	customers
	    <where>
	    	is_deleted = false
	        <if test="name != null">
	            AND name LIKE CONCAT(#{name}, '%')
	        </if>
	        <if test="number != null">
	            AND phone LIKE CONCAT(#{phone}, '%')
	        </if>
	    </where>
	</select>

	<select id="search" resultType="java.util.Map">
	    SELECT 
	    	  c.id
	    	, c.name
	    	, c.address
	    	, c.phone
	    	, a.id
	    	, a.full_name
	    FROM
	    	customers c 
	    JOIN account a ON a.account_id = c.administrator_id
	    <where>
	    	c.is_deleted = false
	        <if test="name != null">
	            AND c.name LIKE CONCAT(#{name}, '%')
	        </if>
	        <if test="phoneNumber != null">
	            AND c.phone LIKE CONCAT(#{phone}, '%')
	        </if>
	    </where>
	    ORDER BY
    	 	SUBSTRING_INDEX(c.name, ' ', -1)
	    LIMIT 3
	    OFFSET #{offset}
	</select>

	<select id="existsByPhone" resultType="int">
	    SELECT 
	    	COUNT(*)
	    FROM
	    	customers
	    <where>
	    	phone = #{phone}
	    </where>
	</select>

	<select id="existsByPhoneNotId" resultType="int">
	    SELECT 
	    	COUNT(*)
	    FROM
	    	customers
	    <where>
	    	phone 	= #{phone}
	    AND id 		!= #{id} 
	    </where>
	</select>
	
	<insert id="insert">
		INSERT INTO 
				customers( customer_name, phone_number, address, administrator_id)
		VALUES
				(#{name},#{number},#{address},#{accountId})
	</insert>

	<update id="update">
		UPDATE
			customers
		SET
				customer_name 	= #{customerName}
			, 	phone_number 	= #{phoneNumber}
			, 	address 		= #{address}
			, 	version 		= version + 1
		<where>
				id 				= #{id}
			AND	version 		= #{version}
		</where>
	</update>

	<update id="delete">
		UPDATE
			customers
		SET
			is_deleted 	= TRUE
		, 	version 		= version + 1
		<where>
			id 			= #{id}
		</where>
	</update>

	<select id="getPhoneByName" resultType="String">
	    SELECT 
	    	phone
	    FROM
	    	customers
	    <where>
	    	is_deleted 	= FALSE
	    AND name 		= #{name} 
	    </where>
	</select>

	<select id="getNameByPhone" resultType="String">
	    SELECT 
	    	name
	    FROM
	    	customers
	    <where>
	    	is_deleted 	= FALSE
	    AND phone 		= #{phone} 
	    </where>
	</select>
  </mapper>